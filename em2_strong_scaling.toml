# ===========================================
# ==== PARAMETER FILE FOR PROJECT: EM3
# ===========================================
#
# This file contains all of the configurable parameters for running this Dendro project.
#
# This file was initially generated from the file: emdabssn_param_setup.toml
#
# Feel free to edit any of the values listed in this  file or make copies for individual runs.
#
# Each of the parameters listed in this file should contain information about the parameter according to the template.
#
# Please note that all "invariant", "dependent", and "hyperinvariant" parameters were not included.
#
# NOTE: What follows is an explanation on parameter types:
# A variant parameter is required for execution.
# A semivariant parameter is not required for execution and can be removed from this file safely.

# ========
# === FILE SAVING AND BASIC INFORMATION PARAMETERS
# ========

# @brief: File prefix for the VTU files that will be saved, can take entire file path to be used as well
# param type: semivariant | data type: string | default: vtu/emda_gr 
"dsolve::SOLVER_VTU_FILE_PREFIX" = "vtu/em3_gr_strong"

# @brief: File prefix for the checkpoint files, can take entire file path to be used as well
# param type: semivariant | data type: string | default: cp/emda_cp 
"dsolve::SOLVER_CHKPT_FILE_PREFIX" = "cp/em3_cp"

# @brief: File prefix for the intermediate profile files, can take entire file path to be used as well
# param type: semivariant | data type: string | default: emda_prof 
"dsolve::SOLVER_PROFILE_FILE_PREFIX" = "em3_prof_strong"

# @brief: The number of evolution variables to put in the output of the files
#         Note that it will use up to this many variables of the "SOLVER_VTU_OUTPUT_EVOL_INDICES", this value
#         should *ALWAYS* be less than or equal to the size of that list.
# param type: semivariant | data type: unsigned int | default: 14 | min: 0 | max: 6
"dsolve::SOLVER_NUM_EVOL_VARS_VTU_OUTPUT" = 6

# @brief: The number of constraint variables written to VTU files
#         Note that it will use up to this many variables of the "SOLVER_VTU_OUTPUT_CONST_INDICES", this value
#         should *ALWAYS* be less than or equal to the size of that list.
# param type: semivariant | data type: unsigned int | default: 1 | min: 0 | max: 6
"dsolve::SOLVER_NUM_CONST_VARS_VTU_OUTPUT" = 2

# @brief: Evolution variable IDs to be written to the VTU files
#         For what these IDs refer to see include/grDef.h and see the VAR enum, the list there is ordered starting from 0
# param type: semivariant | data type: unsigned int[] | default: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35] 
"dsolve::SOLVER_VTU_OUTPUT_EVOL_INDICES" = [0, 1, 2, 3, 4, 5] 

# @brief: Constraint variable IDs to be written to the VTU files
#         For what these IDs refer to see include/grDef.h and see the VAR_CONSTRAINT enum, the list there is ordered starting from 0
# param type: semivariant | data type: unsigned int[] | default: [0, 1, 2, 3, 4, 5] 
"dsolve::SOLVER_VTU_OUTPUT_CONST_INDICES" = [0, 1]

# @brief: Whether to output only the z slice in the VTU file
# param type: semivariant | data type: bool | default: true 
"dsolve::SOLVER_VTU_Z_SLICE_ONLY" = true 

# @brief: Output frequency for the solution, for saving to VTU file
#         This value is every X number of time steps, not at individual times. For shorter runs, this should be smaller
#         For example, if this is set to 1, it will save the output to a VTU file every time it completes a time step
# param type: semivariant | data type: unsigned int | default: 1000 | min: 0 | max: 2000
"dsolve::SOLVER_IO_OUTPUT_FREQ" = 100

# @brief: Solution output gap (instead of frequency, we can use to output the solution if currentTime > lastIOOutputTime + SOLVER_IO_OUTPUT_GAP)
# param type: semivariant | data type: unsigned int | default: 1 | min: 0 | max: 2
"dsolve::SOLVER_IO_OUTPUT_GAP" = 1

# @brief: Timestep output frequency
#         This value is every X number of time steps. This displays information about the run to the console
# param type: semivariant | data type: unsigned int | default: 10 | min: 0 | max: 20
"dsolve::SOLVER_TIME_STEP_OUTPUT_FREQ" = 10

# @brief: The variables that should be shown in the output in the terminal at each time step above. Follow the format
# similar to VTU OUTPUT.
"dsolve::SOLVER_NUM_CONSOLE_OUTPUT_VARS" = 6
"dsolve::SOLVER_CONSOLE_OUTPUT_VARS" = [0, 1, 2, 3, 4, 5] 

# @brief: The constraints that should be shown in the output in the terminal at each time step above. Follow the format
# similar to VTU OUTPUT.
"dsolve::SOLVER_NUM_CONSOLE_OUTPUT_CONSTRAINTS" = 2
"dsolve::SOLVER_CONSOLE_OUTPUT_CONSTRAINTS" = [0, 1] 


# @brief: Frequency for checkpoint saving
#         This value is every X number of time steps.
# param type: semivariant | data type: unsigned int | default: 5000 | min: 0 | max: 10000
"dsolve::SOLVER_CHECKPT_FREQ" = 5000

# @brief: Option for restoring from a checkpoint (will restore if set to 1)
# param type: semivariant | data type: unsigned int | default: 0 | min: 0 | max: 1
"dsolve::SOLVER_RESTORE_SOLVER" = 0

# ========
# === EMDA THEORY AND INITIAL DATA PARAMETERS
# ========
# @brief: Initial data type for EMDA computations (what happens at time 0)
#           0: Default Initial Data
# param type: semivariant | data type: unsigned int | default: 0 | min: 0
"dsolve::SOLVER_ID_TYPE" = 0

# @brief: Initial Data Amplitude 1
# param type: semivariant | data type: double | default: 1.0
"dsolve::EM3_ID_AMP1" = 5.0

# @brief: Initial Data Lambda 1
# param type: semivariant | data type: double | default: 1.0
"dsolve::EM3_ID_LAMBDA1" = 0.05


# ========== SOLVER PARAMETERS ============

# @brief: Which type of derivatives should be used (for CFD computations)
# param type: semivariant | data type: int | default: -1
# Derivative Type:
#    CFD_NONE = -1  -> Will use default derivative calculation
# default and main types
#    CFD_P1_O4 = 0 
#    CFD_P1_O6 = 1
#    CFD_Q1_O6_ETA1 = 2
# isotropic finite difference types
#    CFD_KIM_O4 = 3
#    CFD_HAMR_O4 = 4
#    CFD_JT_O6 = 5
# Explicit derivatives, uses matrices but should give same results as -1
#    EXPLCT_FD_O4 = 6
#    EXPLCT_FD_O6 = 7
#    EXPLCT_FD_O8 = 8
"dsolve::SOLVER_DERIV_TYPE" = 0

# @brief: Which type of 2nd Derivatives should be used (for CFD computations)
# param type: semivariant | data type: int | default: -1
# Derivative Type 2nd-order:
#    CFD2ND_NONE = -1  -> Will use default derivative calculation
# default and main types
#    CFD2ND_P2_O4 = 0 
#    CFD2ND_P2_O6 = 1
#    CFD2ND_Q2_O6_ETA1 = 2
# isotropic finite difference types : NOT YET SUPPORTED
#    CFD2ND_KIM_O4 = 3
#    CFD2ND_HAMR_O4 = 4
#    CFD2ND_JT_O6 = 5
# Explicit derivatives, uses matrices but should give same results as -1
#    EXPLCT2ND_FD_O4 = 6
#    EXPLCT2ND_FD_O6 = 7
#    EXPLCT2ND_FD_O8 = 8
"dsolve::SOLVER_2ND_DERIV_TYPE" = 0

# @brief: Which type of filter should be used (for CFD computations)
# param type: semivariant | data type: int | default: -1
# NO filtering at all!
#    FILT_NONE = -1
# standard filters
#    FILT_KO_DISS = 0
# isotropic finite difference types
#    FILT_KIM_6 = 1
#    FILT_JT_6 = 2
#    FILT_JT_8 = 3
#    FILT_JT_10 = 4
# explicit ko diss - not yet supported
#    EXPLCT_KO = 5
"dsolve::SOLVER_FILTER_TYPE" = 0

# .88 * pi is the default, it seems to fall apart if its not close to Pi
"dsolve::SOLVER_KIM_FILTER_KC" = 2.764601535159018
"dsolve::SOLVER_KIM_FILTER_EPS" = 0.25

# @brief: How often filtering should be applied (not currently in use!)
# param type: semivariant | data type: unsigned int | default: 1
"dsolve::SOLVER_FILTER_FREQ" = 1

# @brief: The type of closure to use when generating the CFD matrices for derivatives
# BLOCK_CFD_CLOSURE = 0 // closure gives better results but 6th requires 4
#    - Full closure, should give better results but requires 4 ghost points for 6th order, and 3 points for 4th
# BLOCK_CFD_DIRICHLET = 1
#    - Applies a Dirichlet boundary condition in the closure
# BLOCK_CFD_LOPSIDE_CLOSURE = 2
#    - Applies a lopsided closure
# BLOCK_PHYS_BOUNDARY = 3
#    - Assumes that it's a physical boundary. This is automatically applied at true boundaries
"dsolve::SOLVER_DERIV_CLOSURE_TYPE" = 1

# @brief: The Courant factor: CFL stability number (specifies how dt=SOLVER_CFL_FACTOR*dx)
# param type: semivariant | data type: double | default: 0.25 | min: 0.0 | max: 0.5
"dsolve::SOLVER_CFL_FACTOR" = 0.25

# @brief: Starting time value, default is time of 0
# param type: semivariant | data type: unsigned int | default: 0 | min: 0 | max: 100
"dsolve::SOLVER_RK_TIME_BEGIN" = 0

# @brief: Time to end the simulation, this is in real "seconds", not number of iterations
# param type: semivariant | data type: unsigned int | default: 800 | min: 0 | max: 1000
"dsolve::SOLVER_RK_TIME_END" = 0.2

# @brief: Runge Kutta method to use (0 -> RK3 , 1 -> RK4, 2 -> RK45), note that this only applies for old solver
# param type: semivariant | data type: unsigned int | default: 1 | min: 0 | max: 3
"dsolve::SOLVER_RK_TYPE" = 1

# @brief: Sigma value for Kreiss-Oliger dissipation
# param type: semivariant | data type: double | default: 0.4 | min: 0.0 | max: 0.8
"dsolve::KO_DISS_SIGMA" = 0.4

# ========
# === DENDRO SETUP AND COMPUTATION-SPECIFIC PARAMETERS
# ========

# @brief: Disable AMR and enable block adaptivity
# param type: semivariant | data type: unsigned int | default: 0 | min: 0 | max: 1
"dsolve::SOLVER_ENABLE_BLOCK_ADAPTIVITY" = 0

# @brief: Maximum level of refinement of the mesh
# param type: semivariant | data type: unsigned int | default: 16 | min: 0 | max: 32
"dsolve::SOLVER_MAXDEPTH" = 13

# @brief: Minimum level of refinement in the mesh
# param type: semivariant | data type: unsigned int | default: 3 | min: 0 | max: 16
"dsolve::SOLVER_MINDEPTH" = 3

# @brief: Refinement mode: 0 -> WAMR , 1 -> none(?)
# param type: semivariant | data type: enum | default: 0 | min: 0 | max: 1
"dsolve::SOLVER_REFINEMENT_MODE" = 0

# @brief: Number variables for refinement
#         Note that it will use up to this many variables of the "REFINE_VARIABLE_INDICES", this value
#         should *ALWAYS* be less than or equal to the size of that list.
# param type: semivariant | data type: unsigned int | default: 36 | min: 0 | max: 6
"dsolve::SOLVER_NUM_REFINE_VARS" = 6

# @brief: The IDs for the refinement variables
#         For what these IDs refer to see include/grDef.h and see the VAR enum, the list there is ordered starting from 0
# param type: semivariant | data type: unsigned int[] | default: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35] 
"dsolve::SOLVER_REFINE_VARIABLE_INDICES" = [0, 1, 2, 3, 4, 5] 

# @brief: Element order for the computations
# param type: semivariant | data type: unsigned int | default: 6 | min: 0 | max: 12
"dsolve::SOLVER_ELE_ORDER" = 4

# @brief: Block minimum X value in the OCTREE DOMAIN, this is only used for the block adaptive octree method
# param type: semivariant | data type: double | default: -6.0 | min: -12.0 | max: 0.0
"dsolve::SOLVER_BLK_MIN_X" = -6.0

# @brief: Block minimum Y value in the OCTREE DOMAIN, this is only used for the block adaptive octree method
# param type: semivariant | data type: double | default: -6.0 | min: -12.0 | max: 0.0
"dsolve::SOLVER_BLK_MIN_Y" = -6.0

# @brief: Block minimum Z value in the OCTREE DOMAIN, this is only used for the block adaptive octree method
# param type: semivariant | data type: double | default: -1.0 | min: -12.0 | max: 0.0
"dsolve::SOLVER_BLK_MIN_Z" = -6.0

# @brief: Block maximum X value in the OCTREE DOMAIN, this is only used for the block adaptive octree method
# param type: semivariant | data type: double | default: 6.0 | min: 0.0 | max: 12.0
"dsolve::SOLVER_BLK_MAX_X" = 6.0

# @brief: Block maximum Y value in the OCTREE DOMAIN, this is only used for the block adaptive octree method
# param type: semivariant | data type: double | default: 6.0 | min: 0.0 | max: 12.0
"dsolve::SOLVER_BLK_MAX_Y" = 6.0

# @brief: Block maximum Z value in the OCTREE DOMAIN, this is only used for the block adaptive octree method
# param type: semivariant | data type: double | default: 1.0 | min: 0.0 | max: 12.0
"dsolve::SOLVER_BLK_MAX_Z" = 6.0

# @brief: Frequency for performing remeshing test based on wavelets
#         This value is every X number of time steps.
# param type: semivariant | data type: unsigned int | default: 10 | min: 0 | max: 20
"dsolve::SOLVER_REMESH_TEST_FREQ" = 10

# @brief:  Grain size N/p, Where N number of total octants, p number of active cores
# param type: semivariant | data type: unsigned int | default: 50 | min: 0 | max: 100
"dsolve::SOLVER_DENDRO_GRAIN_SZ" = 4

# @brief: Dendro coarsening factor, if computed wavelet tol < SOLVER_DENDRO_AMR_FAC*SOLVER_WAVELET_TOL
# param type: semivariant | data type: double | default: 0.1 | min: 0.0 | max: 0.2
"dsolve::SOLVER_DENDRO_AMR_FAC" = 1.0e-2

# @brief: Number of grid iterations untill the grid converges initially
# param type: semivariant | data type: unsigned int | default: 10 | min: 0 | max: 20
# NOTE: for weak scalability, no need to change the mesh once grain size is reached
"dsolve::SOLVER_INIT_GRID_ITER" = 0

# @brief: If the grid should be initialized with the true initial data in between each of the iters above
"dsolve::SOLVER_INIT_GRID_REINITIALIZE_EACH_TIME" = true

# @brief: Splitter fix value
# param type: semivariant | data type: unsigned int | default: 2 | min: 0 | max: 4
"dsolve::SOLVER_SPLIT_FIX" = 2

# @brief: Prefered time step size (this is overwritten with the specified CFL factor, not recommended to use this)
# param type: semivariant | data type: double | default: 0.01 | min: 0.0 | max: 0.02
"dsolve::SOLVER_RK45_TIME_STEP_SIZE" = 0.01

# @brief: Desired tolerance value for the RK45 method (with adaptive time stepping), NOT CURRENTLY USED
# param type: semivariant | data type: double | default: 0.001 | min: 0.0 | max: 0.002
"dsolve::SOLVER_RK45_DESIRED_TOL" = 0.001

# @brief: The TS offset for LTS in EMDA
# param type: semivariant | data type: unsigned int | default: 0 | min: 4 | max: 8
"dsolve::SOLVER_LTS_TS_OFFSET" = 0

# @brief: Variable group size for the asynchronous unzip operation. This is an async communication. (Upper bound should be SOLVER_NUM_VARS)
# param type: semivariant | data type: unsigned int | default: 4 | min: 0 | max: SOLVER_NUM_VARS
"dsolve::SOLVER_ASYNC_COMM_K" = 1

# @brief: Dendro load imbalance tolerance for flexible partitioning
# param type: semivariant | data type: double | default: 0.1 | min: 0.0 | max: 0.2
"dsolve::SOLVER_LOAD_IMB_TOL" = 0.1

# @brief: Dimensionality of the octree, (meshing is supported only for 3D)
# param type: semivariant | data type: unsigned int | default: 3 | min: 0 | max: 6
"dsolve::SOLVER_DIM" = 3

# @brief: Wavelet tolerance
# param type: semivariant | data type: double | default: 1e-05 | min: 0.0 | max: 2e-05
"dsolve::SOLVER_WAVELET_TOL" = 1e-08

# @brief: Set wavelet tolerance using a function (default 0)
# param type: semivariant | data type: unsigned int | default: 3 | min: 0 | max: 6
"dsolve::SOLVER_USE_WAVELET_TOL_FUNCTION" = 0

# @brief: The maximum value of the wavelet tolerance
# param type: semivariant | data type: double | default: 0.001 | min: 0.0 | max: 0.002
"dsolve::SOLVER_WAVELET_TOL_MAX" = 0.001

# @brief: Radius R0 for the wavelet tolerance function
# param type: semivariant | data type: double | default: 30.0 | min: 0.0 | max: 60.0
"dsolve::SOLVER_WAVELET_TOL_FUNCTION_R0" = 30.0

# @brief: Radius R1 for the wavelet tolerance function
# param type: semivariant | data type: double | default: 220.0 | min: 0.0 | max: 440.0
"dsolve::SOLVER_WAVELET_TOL_FUNCTION_R1" = 220.0

# @brief: Fd intergrid transfer enable or disable
# param type: semivariant | data type: bool | default: False 
"dsolve::SOLVER_USE_FD_GRID_TRANSFER" = false

# @brief: Domain bounds 
# param type: semivariant | data type: double | default: -400.0 | min: -500.0 | max: 0.0
"dsolve::SOLVER_GRID_MIN_X" = -100.0

# @brief: Domain bounds 
# param type: semivariant | data type: double | default: 400.0 | min: 0.0 | max: 500.0
"dsolve::SOLVER_GRID_MAX_X" = 100.0

# @brief: Domain bounds
# param type: semivariant | data type: double | default: -400.0 | min: -500.0 | max: 0.0
"dsolve::SOLVER_GRID_MIN_Y" = -100.0

# @brief: Domain bounds 
# param type: semivariant | data type: double | default: 400.0 | min: 0.0 | max: 500.0
"dsolve::SOLVER_GRID_MAX_Y" = 100.0

# @brief: Domain bounds
# param type: semivariant | data type: double | default: -400.0 | min: -500.0 | max: 0.0
"dsolve::SOLVER_GRID_MIN_Z" = -100.0

# @brief: Domain bounds 
# param type: semivariant | data type: double | default: 400.0 | min: 0.0 | max: 500.0
"dsolve::SOLVER_GRID_MAX_Z" = 100.0


"dsolve::SOLVER_ETA_CONST" = 2.0
"dsolve::SOLVER_ETA_DAMPING_EXP" = 2.0
"dsolve::SOLVER_ETA_R0" = 30.0

# ===========================================
# END PARAMTER FILE
# ===========================================:wq

